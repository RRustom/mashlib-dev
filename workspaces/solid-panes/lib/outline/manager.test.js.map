{"version":3,"sources":["../../src/outline/manager.test.ts"],"names":["MockPane","render","subject","div","document","createElement","appendChild","createTextNode","uri","mockPaneRegistry","list","byName","describe","result","beforeAll","table","row","manager","OutlineManager","dom","session","paneRegistry","outlineObjectTD","it","expect","nodeName","toBe","toHaveAttribute","toHaveClass","toHaveStyle","img","firstChild","toHaveTextContent","label","linkIcon","beforeEach","lastChild","expand","click","parentNode","error","phoneLink","phoneIcon","not","text"],"mappings":"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","sourcesContent":["/* eslint-env jest */\nimport OutlineManager from './manager'\n\nimport { lit, NamedNode, sym, blankNode } from 'rdflib'\nimport { findByText, getByText } from '@testing-library/dom'\n\nconst MockPane = {\n  render: (subject: NamedNode) => {\n    const div = document.createElement('div')\n    div.appendChild(document.createTextNode(`Mock Pane for ${subject.uri}`))\n    return div\n  }\n}\n\nconst mockPaneRegistry = {\n  list: [],\n  byName: () => MockPane\n}\n\ndescribe('manager', () => {\n  describe('outline object td', () => {\n    describe('for a named node', () => {\n      let result\n      beforeAll(() => {\n        const table = document.createElement('table')\n        const row = document.createElement('tr')\n        table.appendChild(row)\n        const manager = new OutlineManager({ dom: document, session: { paneRegistry: mockPaneRegistry } })\n        result = manager.outlineObjectTD(sym('https://namednode.example/'), null, null, null)\n        row.appendChild(result)\n      })\n      it('is a html td element', () => {\n        expect(result.nodeName).toBe('TD')\n      })\n      it('about attribute refers to node', () => {\n        expect(result).toHaveAttribute('about', '<https://namednode.example/>')\n      })\n      it('has class obj', () => {\n        expect(result).toHaveClass('obj')\n      })\n      it('is selectable', () => {\n        expect(result).toHaveAttribute('notselectable', 'false')\n      })\n      it('has style', () => {\n        expect(result).toHaveStyle('margin: 0.2em; border: none; padding: 0; vertical-align: top;')\n      })\n      it('shows an expand icon', () => {\n        const img = result.firstChild\n        expect(img.nodeName).toBe('IMG')\n        expect(img).toHaveAttribute('src', 'https://solid.github.io/solid-ui/src/originalIcons/tbl-expand-trans.png')\n      })\n      it('shows the node label', () => {\n        expect(result).toHaveTextContent('namednode.example')\n      })\n      it('label is draggable', () => {\n        const label = getByText(result, 'namednode.example')\n        expect(label).toHaveAttribute('draggable', 'true')\n      })\n      describe('link icon', () => {\n        let linkIcon\n        beforeEach(() => {\n          const label = getByText(result, 'namednode.example')\n          linkIcon = label.lastChild\n        })\n        it('is linked to named node URI', () => {\n          expect(linkIcon.nodeName).toBe('A')\n          expect(linkIcon).toHaveAttribute('href', 'https://namednode.example/')\n        })\n      })\n      describe('expanding', () => {\n        it('renders relevant pane', async () => {\n          const expand = result.firstChild\n          expand.click()\n          const error = await findByText(result.parentNode, /Mock Pane/)\n          expect(error).toHaveTextContent('Mock Pane for https://namednode.example/')\n        })\n      })\n    })\n\n    describe('for a tel uri', () => {\n      let result\n      beforeAll(() => {\n        const manager = new OutlineManager({ dom: document })\n        result = manager.outlineObjectTD(sym('tel:+1-201-555-0123'), null, null, null)\n      })\n      it('is a html td element', () => {\n        expect(result.nodeName).toBe('TD')\n      })\n      it('about attribute refers to tel uri', () => {\n        expect(result).toHaveAttribute('about', '<tel:+1-201-555-0123>')\n      })\n      it('has class obj', () => {\n        expect(result).toHaveClass('obj')\n      })\n      it('is selectable', () => {\n        expect(result).toHaveAttribute('notselectable', 'false')\n      })\n      it('has style', () => {\n        expect(result).toHaveStyle('margin: 0.2em; border: none; padding: 0; vertical-align: top;')\n      })\n      it('shows an expand icon', () => {\n        const img = result.firstChild\n        expect(img.nodeName).toBe('IMG')\n        expect(img).toHaveAttribute('src', 'https://solid.github.io/solid-ui/src/originalIcons/tbl-expand-trans.png')\n      })\n      it('shows the phone number', () => {\n        expect(result).toHaveTextContent('+1-201-555-0123')\n      })\n      describe('phone link', () => {\n        let phoneLink\n        beforeAll(() => {\n          const label = getByText(result, '+1-201-555-0123')\n          phoneLink = label.lastChild\n        })\n        it('is linked to tel uri', () => {\n          expect(phoneLink.nodeName).toBe('A')\n          expect(phoneLink).toHaveAttribute('href', 'tel:+1-201-555-0123')\n        })\n        it('is represented by phone icon', () => {\n          const phoneIcon = phoneLink.lastChild\n          expect(phoneIcon.nodeName).toBe('IMG')\n          expect(phoneIcon).toHaveAttribute('src', 'https://solid.github.io/solid-ui/src/originalIcons/silk/telephone.png')\n        })\n      })\n    })\n\n    describe('for a literal', () => {\n      let result\n      beforeAll(() => {\n        const manager = new OutlineManager({ dom: document })\n        result = manager.outlineObjectTD(lit('some text'), null, null, null)\n      })\n      it('is a html td element', () => {\n        expect(result.nodeName).toBe('TD')\n      })\n      it('has no about attribute', () => {\n        expect(result).not.toHaveAttribute('about')\n      })\n      it('has class obj', () => {\n        expect(result).toHaveClass('obj')\n      })\n      it('is selectable', () => {\n        expect(result).toHaveAttribute('notselectable', 'false')\n      })\n      it('has style', () => {\n        expect(result).toHaveStyle('margin: 0.2em; border: none; padding: 0; vertical-align: top;')\n      })\n      it('shows the literal text', () => {\n        expect(result).toHaveTextContent('some text')\n      })\n      it('literal text preserves white space', () => {\n        const text = getByText(result, 'some text')\n        expect(text).toHaveStyle('white-space: pre-wrap;')\n      })\n    })\n\n    describe('for a blank node', () => {\n      let result\n      beforeAll(() => {\n        const manager = new OutlineManager({ dom: document })\n        result = manager.outlineObjectTD(blankNode('blank-node'), null, null, null)\n      })\n      it('is a html td element', () => {\n        expect(result.nodeName).toBe('TD')\n      })\n      it('has about attribute', () => {\n        expect(result).toHaveAttribute('about', '_:blank-node')\n      })\n      it('has class obj', () => {\n        expect(result).toHaveClass('obj')\n      })\n      it('is selectable', () => {\n        expect(result).toHaveAttribute('notselectable', 'false')\n      })\n      it('has style', () => {\n        expect(result).toHaveStyle('margin: 0.2em; border: none; padding: 0; vertical-align: top;')\n      })\n      it('shows 3 dots', () => {\n        expect(result).toHaveTextContent('...')\n      })\n    })\n  })\n})\n"],"file":"manager.test.js"}