{"version":3,"sources":["../../src/trustedApplications/trustedApplications.test.ts"],"names":["ns","$rdf","describe","it","expect","length","toBe","mockStore","graph","mockOrigin","sym","mockProfile","toEqual","mockApplication","add","acl","statementsToDelete","toMatchSnapshot","lit","modes","value","statementsToAdd"],"mappings":"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","sourcesContent":["/* eslint-env jest */\nimport * as $rdf from 'rdflib'\nimport solidNamespace from 'solid-namespace'\nimport { generateRandomString, getStatementsToDelete, getStatementsToAdd } from './trustedApplications.utils'\n\nconst ns = solidNamespace($rdf)\n\ndescribe('generateRandomString', () => {\n  it('generates a random string five characters long', () => {\n    expect(generateRandomString().length).toBe(5)\n  })\n})\n\ndescribe('getStatementsToDelete', () => {\n  it('should return an empty array when there are no statements', () => {\n    const mockStore = $rdf.graph()\n    const mockOrigin = $rdf.sym('https://origin.example')\n    const mockProfile = $rdf.sym('https://profile.example#me')\n    expect(\n      getStatementsToDelete(mockOrigin, mockProfile, mockStore, ns)\n    ).toEqual([])\n  })\n\n  it('should return all statements for the given origin', () => {\n    const mockStore = $rdf.graph()\n    const mockApplication = $rdf.sym('https://app.example')\n    const mockOrigin = $rdf.sym('https://origin.example')\n    const mockProfile = $rdf.sym('https://profile.example#me')\n    mockStore.add(mockApplication, ns.acl('origin'), mockOrigin)\n    mockStore.add(mockApplication, ns.acl('mode'), ns.acl('Read'))\n    mockStore.add(mockProfile, ns.acl('trustedApp'), mockApplication)\n    const statementsToDelete = getStatementsToDelete(\n      mockOrigin,\n      mockProfile,\n      mockStore,\n      ns\n    )\n    expect(statementsToDelete.length).toBe(3)\n    expect(statementsToDelete).toMatchSnapshot()\n  })\n\n  it('should not return statements for a different origin', () => {\n    const mockStore = $rdf.graph()\n    const mockApplication = $rdf.sym('https://app.example')\n    const mockOrigin = $rdf.sym('https://origin.example')\n    const mockProfile = $rdf.sym('https://profile.example#me')\n    mockStore.add(mockApplication, ns.acl('origin'), mockOrigin)\n    mockStore.add(mockApplication, ns.acl('mode'), ns.acl('Read'))\n    mockStore.add(mockProfile, ns.acl('trustedApp'), mockApplication)\n\n    const statementsToDelete = getStatementsToDelete(\n      $rdf.lit('A different origin'), // @@ TODO Remove casting\n      mockProfile,\n      mockStore,\n      ns\n    )\n    expect(statementsToDelete.length).toBe(0)\n    expect(statementsToDelete).toEqual([])\n  })\n})\n\ndescribe('getStatementsToAdd', () => {\n  it('should return all required statements to add the given permissions for a given origin', () => {\n    const mockOrigin = $rdf.sym('https://origin.example')\n    const mockProfile = $rdf.sym('https://profile.example#me')\n    const modes = [ns.acl('Read').value, ns.acl('Write').value]\n\n    const statementsToAdd = getStatementsToAdd(\n      mockOrigin,\n      'mock_app_id',\n      modes,\n      mockProfile,\n      ns\n    )\n    expect(statementsToAdd.length).toBe(4)\n    expect(statementsToAdd).toMatchSnapshot()\n  })\n})\n"],"file":"trustedApplications.test.js"}