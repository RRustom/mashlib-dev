{"version":3,"sources":["../../src/trustedApplications/trustedApplications.utils.ts"],"names":["getStatementsToDelete","origin","person","kb","ns","applicationStatements","statementsMatching","acl","statementsToDelete","reduce","memo","st","concat","subject","getStatementsToAdd","nodeName","modes","application","BlankNode","doc","map","mode","generateRandomString","Math","random","toString","substr"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;AAGO,SAASA,qBAAT,CACLC,MADK,EAELC,MAFK,EAGLC,EAHK,EAILC,EAJK,EAKL;AACA,MAAMC,qBAAqB,GAAGF,EAAE,CAACG,kBAAH,CAC5B,IAD4B,EAE5BF,EAAE,CAACG,GAAH,CAAO,QAAP,CAF4B,EAG5BN,MAH4B,CAA9B;AAKA,MAAMO,kBAAkB,GAAGH,qBAAqB,CAACI,MAAtB,CACzB,UAACC,IAAD,EAAOC,EAAP,EAAc;AACZ,WAAOD,IAAI,CACRE,MADI,CAEHT,EAAE,CAACG,kBAAH,CACEJ,MADF,EAEEE,EAAE,CAACG,GAAH,CAAO,YAAP,CAFF,EAGEI,EAAE,CAACE,OAHL,CAFG,EAQJD,MARI,CAQGT,EAAE,CAACG,kBAAH,CAAsBK,EAAE,CAACE,OAAzB,CARH,CAAP;AASD,GAXwB,EAYzB,EAZyB,CAA3B;AAcA,SAAOL,kBAAP;AACD;;AAEM,SAASM,kBAAT,CACLb,MADK,EAELc,QAFK,EAGLC,KAHK,EAILd,MAJK,EAKLE,EALK,EAML;AACA,MAAMa,WAAW,GAAG,IAAIC,iBAAJ,cAAoBH,QAApB,EAApB;AACA,UACE,gBAAGb,MAAH,EAAWE,EAAE,CAACG,GAAH,CAAO,YAAP,CAAX,EAAiCU,WAAjC,EAA8Cf,MAAM,CAACiB,GAAP,EAA9C,CADF,EAEE,gBAAGF,WAAH,EAAgBb,EAAE,CAACG,GAAH,CAAO,QAAP,CAAhB,EAAkCN,MAAlC,EAA0CC,MAAM,CAACiB,GAAP,EAA1C,CAFF,4BAGKH,KAAK,CACLI,GADA,CACI,UAAAC,IAAI;AAAA,WAAI,iBAAIA,IAAJ,CAAJ;AAAA,GADR,EAEAD,GAFA,CAEI,UAAAC,IAAI;AAAA,WAAI,gBAAGJ,WAAH,EAAgBb,EAAE,CAACG,GAAH,CAAO,MAAP,CAAhB,EAAgCc,IAAhC,EAAsCnB,MAAM,CAACiB,GAAP,EAAtC,CAAJ;AAAA,GAFR,CAHL;AAOD;;AAEM,SAASG,oBAAT,GAAiC;AACtC,SAAOC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAP;AACD","sourcesContent":["import { BlankNode, IndexedFormula, NamedNode, st, Literal, sym, Statement } from 'rdflib'\nimport { Namespaces } from 'solid-namespace'\n\nexport function getStatementsToDelete (\n  origin: NamedNode | Literal,\n  person: NamedNode,\n  kb: IndexedFormula,\n  ns: Namespaces\n) {\n  const applicationStatements = kb.statementsMatching(\n    null,\n    ns.acl('origin'),\n    origin\n  )\n  const statementsToDelete = applicationStatements.reduce(\n    (memo, st) => {\n      return memo\n        .concat(\n          kb.statementsMatching(\n            person,\n            ns.acl('trustedApp'),\n            st.subject as NamedNode\n          )\n        )\n        .concat(kb.statementsMatching(st.subject))\n    },\n    [] as Array<Statement>\n  )\n  return statementsToDelete\n}\n\nexport function getStatementsToAdd (\n  origin: NamedNode,\n  nodeName: string,\n  modes: string[],\n  person: NamedNode,\n  ns: Namespaces\n) {\n  const application = new BlankNode(`bn_${nodeName}`)\n  return [\n    st(person, ns.acl('trustedApp'), application, person.doc()),\n    st(application, ns.acl('origin'), origin, person.doc()),\n    ...modes\n      .map(mode => sym(mode))\n      .map(mode => st(application, ns.acl('mode'), mode, person.doc()))\n  ]\n}\n\nexport function generateRandomString () {\n  return Math.random().toString(36).substr(2, 5)\n}\n"],"file":"trustedApplications.utils.js"}