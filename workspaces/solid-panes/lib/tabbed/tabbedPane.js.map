{"version":3,"sources":["../../src/tabbed/tabbedPane.ts"],"names":["TabbedPane","icon","icons","iconBase","name","audience","ns","solid","label","subject","context","kb","session","store","typeURIs","findTypeURIs","meeting","uri","render","dom","div","createElement","fetcher","Error","load","appendChild","tabs","tabWidget","predicate","any","ordered","orientation","anyValue","renderMain","containerDiv","item","innerHTML","table","getOutliner","GotoSubject","undefined","renderTab","the","widgets","personTR","backgroundColor","ui"],"mappings":"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","sourcesContent":["/*   Tabbed view of anything\n **\n ** data-driven\n **\n */\nimport { Store } from 'rdflib'\nimport { PaneDefinition } from 'pane-registry'\nimport { icons, ns, tabs, widgets } from 'solid-ui'\n\nconst TabbedPane: PaneDefinition = {\n  icon: icons.iconBase + 'noun_688606.svg',\n\n  name: 'tabbed',\n\n  audience: [ns.solid('PowerUser')],\n\n  // Does the subject deserve this pane?\n  label: (subject, context) => {\n    const kb = context.session.store as Store\n    const typeURIs = kb.findTypeURIs(subject)\n    if (ns.meeting('Cluster').uri in typeURIs) {\n      return 'Tabbed'\n    }\n    return null\n  },\n\n  render: (subject, context) => {\n    const dom = context.dom\n    const store = context.session.store as Store\n    const div = dom.createElement('div')\n\n    ;(async () => {\n      if (!store.fetcher) {\n        throw new Error('Store has no fetcher')\n      }\n      await store.fetcher.load(subject)\n\n      div.appendChild(tabs.tabWidget({\n        dom,\n        subject,\n        predicate: store.any(subject, ns.meeting('predicate')) || ns.meeting('toolList'),\n        ordered: true,\n        orientation: ((store as Store).anyValue(subject, ns.meeting('orientation')) || '0') as ('0' | '1' | '2' | '3'),\n        renderMain: (containerDiv, item) => {\n          containerDiv.innerHTML = ''\n          const table = containerDiv.appendChild(context.dom.createElement('table'))\n          ;(context.getOutliner(context.dom) as any).GotoSubject(item, true, null, false, undefined, table)\n        },\n        renderTab: (containerDiv, item) => {\n          const predicate = store.the(subject, ns.meeting('predicate'))\n          containerDiv.appendChild(widgets.personTR(context.dom, predicate, item, {}))\n        },\n        backgroundColor: store.anyValue(subject, ns.ui('backgroundColor')) || '#ddddcc'\n      }))\n    })()\n    return div\n  }\n}\n\nexport default TabbedPane\n"],"file":"tabbedPane.js"}