{"version":3,"sources":["../../src/dokieli/dokieliPane.js"],"names":["UI","require","$rdf","mime","DOKIELI_TEMPLATE","module","exports","icon","icons","iconBase","name","mintClass","ns","solid","label","subject","context","kb","session","store","allowed","hasContentTypeIn","x","displayables","cts","fetcher","getHeader","j","length","k","indexOf","hasContentTypeIn2","t","findTypeURIs","Util","mediaTypeClass","uri","link","mintNew","newPaneOptions","newInstance","newBase","endsWith","slice","sym","contentType","lookup","includes","console","log","htmlContents","filename","split","decodeURIComponent","encodedTitle","replace","Promise","resolve","webOperation","data","then","err","render","myDocument","dom","div","createElement","setAttribute","iframe","doc","ct","tr","appendChild"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,YAAD,CAApB,C,CAEA;;;AAEA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,UAAD,CAAhC,C,CAA6C;;;AAE7CI,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAEP,EAAE,CAACQ,KAAH,CAASC,QAAT,GAAoB,kBADX;AAC+B;AAE9CC,EAAAA,IAAI,EAAE,SAHS;AAKfC,EAAAA,SAAS,EAAEX,EAAE,CAACY,EAAH,CAAMC,KAAN,CAAY,iBAAZ,CALI;AAK4B;AAE3CC,EAAAA,KAAK,EAAE,eAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACjC,QAAMC,EAAE,GAAGD,OAAO,CAACE,OAAR,CAAgBC,KAA3B;AACA,QAAMP,EAAE,GAAGZ,EAAE,CAACY,EAAd;AACA,QAAMQ,OAAO,GAAG,CACd;AACA,eAFc,EAGd,uBAHc,CAId;AACA;AALc,KAAhB;;AAQA,QAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUJ,EAAV,EAAcK,CAAd,EAAiBC,YAAjB,EAA+B;AACtD,UAAMC,GAAG,GAAGP,EAAE,CAACQ,OAAH,CAAWC,SAAX,CAAqBJ,CAArB,EAAwB,cAAxB,CAAZ;;AACA,UAAIE,GAAJ,EAAS;AACP,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,YAAY,CAACK,MAAjC,EAAyCC,CAAC,EAA1C,EAA8C;AAC5C,gBAAIL,GAAG,CAACG,CAAD,CAAH,CAAOG,OAAP,CAAeP,YAAY,CAACM,CAAD,CAA3B,KAAmC,CAAvC,EAA0C;AACxC,qBAAO,IAAP;AACD;AACF;AACF;AACF;;AACD,aAAO,KAAP;AACD,KAZD,CAXiC,CAyBjC;;;AACA,QAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUd,EAAV,EAAcK,CAAd,EAAiBC,YAAjB,EAA+B;AACvD,UAAMS,CAAC,GAAGf,EAAE,CAACgB,YAAH,CAAgBlB,OAAhB,CAAV;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,YAAY,CAACK,MAAjC,EAAyCC,CAAC,EAA1C,EAA8C;AAC5C,YAAI3B,IAAI,CAACgC,IAAL,CAAUC,cAAV,CAAyBZ,YAAY,CAACM,CAAD,CAArC,EAA0CO,GAA1C,IAAiDJ,CAArD,EAAwD;AACtD,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD,KARD;;AAUA,QAAI,CAACjB,OAAO,CAACqB,GAAb,EAAkB,OAAO,IAAP,CApCe,CAoCH;;AAE9B,QAAMJ,CAAC,GAAGf,EAAE,CAACgB,YAAH,CAAgBlB,OAAhB,CAAV;AACA,QAAIiB,CAAC,CAACpB,EAAE,CAACyB,IAAH,CAAQ,SAAR,EAAmBD,GAApB,CAAL,EAA+B,OAAO,MAAP;;AAE/B,QACEf,gBAAgB,CAACJ,EAAD,EAAKF,OAAL,EAAcK,OAAd,CAAhB,IACAW,iBAAiB,CAACd,EAAD,EAAKF,OAAL,EAAcK,OAAd,CAFnB,EAGE;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAxDc;AA0Df;AACAkB,EAAAA,OAAO,EAAE,iBAAUtB,OAAV,EAAmBuB,cAAnB,EAAmC;AAC1C,QAAMtB,EAAE,GAAGD,OAAO,CAACE,OAAR,CAAgBC,KAA3B;AACA,QAAIqB,WAAW,GAAGD,cAAc,CAACC,WAAjC;;AACA,QAAI,CAACA,WAAL,EAAkB;AAChB,UAAIJ,GAAG,GAAGG,cAAc,CAACE,OAAzB;;AACA,UAAIL,GAAG,CAACM,QAAJ,CAAa,GAAb,CAAJ,EAAuB;AACrBN,QAAAA,GAAG,GAAGA,GAAG,CAACO,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAN;AACAJ,QAAAA,cAAc,CAACE,OAAf,GAAyBL,GAAzB;AACD;;AACDI,MAAAA,WAAW,GAAGvB,EAAE,CAAC2B,GAAH,CAAOR,GAAP,CAAd;AACD;;AAED,QAAMS,WAAW,GAAG1C,IAAI,CAAC2C,MAAL,CAAYN,WAAW,CAACJ,GAAxB,CAApB;;AACA,QAAI,CAACS,WAAD,IAAgB,CAACA,WAAW,CAACE,QAAZ,CAAqB,MAArB,CAArB,EAAmD;AACjDP,MAAAA,WAAW,GAAGtC,IAAI,CAAC0C,GAAL,CAASJ,WAAW,CAACJ,GAAZ,GAAkB,OAA3B,CAAd;AACD;;AACDG,IAAAA,cAAc,CAACC,WAAf,GAA6BA,WAA7B,CAhB0C,CAgBD;;AAEzCQ,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BT,WAAxC;AAEA,QAAIU,YAAY,GAAG9C,gBAAnB;AACA,QAAI+C,QAAQ,GAAGX,WAAW,CAACJ,GAAZ,CAAgBgB,KAAhB,CAAsB,GAAtB,EAA2BT,KAA3B,CAAiC,CAAC,CAAlC,EAAqC,CAArC,CAAf;AACAQ,IAAAA,QAAQ,GAAGE,kBAAkB,CAACF,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAD,CAA7B;AACA,QAAME,YAAY,GAAGH,QAAQ,CAC1BI,OADkB,CACV,IADU,EACJ,OADI,EAElBA,OAFkB,CAEV,IAFU,EAEJ,MAFI,EAGlBA,OAHkB,CAGV,IAHU,EAGJ,MAHI,CAArB;AAIAL,IAAAA,YAAY,GAAGA,YAAY,CAACK,OAAb,CAAqB,SAArB,EAAgC,YAAYD,YAA5C,CAAf;AACAJ,IAAAA,YAAY,GAAGA,YAAY,CAACK,OAAb,CACb,YADa,EAEb,SAASD,YAAT,GAAwB,iBAFX,CAAf;AAIAN,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBC,YAArC;AACA,WAAO,IAAIM,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpCxC,MAAAA,EAAE,CAACQ,OAAH,CACGiC,YADH,CACgB,KADhB,EACuBlB,WAAW,CAACJ,GADnC,EACwC;AACpCuB,QAAAA,IAAI,EAAET,YAD8B;AAEpCL,QAAAA,WAAW,EAAE;AAFuB,OADxC,EAKGe,IALH,CAKQ,YAAY;AAChBZ,QAAAA,OAAO,CAACC,GAAR,CACE,qCAAqCV,cAAc,CAACC,WADtD;AAGAiB,QAAAA,OAAO,CAAClB,cAAD,CAAP;AACD,OAVH,WAWS,UAAUsB,GAAV,EAAe;AACpBb,QAAAA,OAAO,CAACC,GAAR,CACE,oCACEV,cAAc,CAACC,WADjB,GAEE,IAFF,GAGEqB,GAJJ;AAMD,OAlBH;AAmBD,KApBM,CAAP;AAqBD,GAjHc;AAmHf;AACAC,EAAAA,MAAM,EAAE,gBAAU/C,OAAV,EAAmBC,OAAnB,EAA4B;AAClC,QAAM+C,UAAU,GAAG/C,OAAO,CAACgD,GAA3B;AACA,QAAMC,GAAG,GAAGF,UAAU,CAACG,aAAX,CAAyB,KAAzB,CAAZ;AACA,QAAMjD,EAAE,GAAGD,OAAO,CAACE,OAAR,CAAgBC,KAA3B,CAHkC,CAKlC;;AACA8C,IAAAA,GAAG,CAACE,YAAJ,CAAiB,OAAjB,EAA0B,SAA1B;AACA,QAAMC,MAAM,GAAGL,UAAU,CAACG,aAAX,CAAyB,QAAzB,CAAf;AACAE,IAAAA,MAAM,CAACD,YAAP,CAAoB,KAApB,EAA2BpD,OAAO,CAACqB,GAAnC,EARkC,CAQM;;AACxCgC,IAAAA,MAAM,CAACD,YAAP,CAAoB,OAApB,EAA6B,KAA7B;AAEA,QAAM3C,GAAG,GAAGP,EAAE,CAACQ,OAAH,CAAWC,SAAX,CAAqBX,OAAO,CAACsD,GAAR,EAArB,EAAoC,cAApC,CAAZ;AACA,QAAMC,EAAE,GAAG9C,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAN,GAAY,IAA1B;;AACA,QAAI8C,EAAJ,EAAQ;AACNtB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBqB,EAAlC;AACD,KAFD,MAEO;AACLtB,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD,KAjBiC,CAmBlC;AACA;AACA;AACA;AACA;AAEA;;;AAEAmB,IAAAA,MAAM,CAACD,YAAP,CAAoB,OAApB,EAA6B,0CAA7B,EA3BkC,CA2BuC;AACzE;AACA;;AACA,QAAMI,EAAE,GAAGR,UAAU,CAACG,aAAX,CAAyB,IAAzB,CAAX;AACAK,IAAAA,EAAE,CAACC,WAAH,CAAeJ,MAAf;AACAH,IAAAA,GAAG,CAACO,WAAJ,CAAgBD,EAAhB;AACA,WAAON,GAAP;AACD;AAtJc,CAAjB,C,CAwJA","sourcesContent":["/*   Human-readable editable \"Dokieli\" Pane\n **\n **  This outline pane contains the document contents for a Dokieli document\n ** The dokeili system allows the user to edit a document including anotations\n ** review.   It does not use turtle, but RDF/a\n */\n\nconst UI = require('solid-ui')\nconst $rdf = require('rdflib')\nconst mime = require('mime-types')\n\n// const DOKIELI_TEMPLATE_URI = 'https://dokie.li/new' // Copy to make new dok\n\nconst DOKIELI_TEMPLATE = require('./new.js') // Distributed with this library\n\nmodule.exports = {\n  icon: UI.icons.iconBase + 'dokieli-logo.png', // @@ improve? more like doccument?\n\n  name: 'Dokieli',\n\n  mintClass: UI.ns.solid('DokieliDocument'), // @@ A better class?\n\n  label: function (subject, context) {\n    const kb = context.session.store\n    const ns = UI.ns\n    const allowed = [\n      // 'text/plain',\n      'text/html',\n      'application/xhtml+xml'\n      // 'image/png', 'image/jpeg', 'application/pdf',\n      // 'video/mp4'\n    ]\n\n    const hasContentTypeIn = function (kb, x, displayables) {\n      const cts = kb.fetcher.getHeader(x, 'content-type')\n      if (cts) {\n        for (let j = 0; j < cts.length; j++) {\n          for (let k = 0; k < displayables.length; k++) {\n            if (cts[j].indexOf(displayables[k]) >= 0) {\n              return true\n            }\n          }\n        }\n      }\n      return false\n    }\n\n    // This data coul d come from a fetch OR from ldp comtaimner\n    const hasContentTypeIn2 = function (kb, x, displayables) {\n      const t = kb.findTypeURIs(subject)\n      for (let k = 0; k < displayables.length; k++) {\n        if ($rdf.Util.mediaTypeClass(displayables[k]).uri in t) {\n          return true\n        }\n      }\n      return false\n    }\n\n    if (!subject.uri) return null // no bnodes\n\n    const t = kb.findTypeURIs(subject)\n    if (t[ns.link('WebPage').uri]) return 'view'\n\n    if (\n      hasContentTypeIn(kb, subject, allowed) ||\n      hasContentTypeIn2(kb, subject, allowed)\n    ) {\n      return 'Dok'\n    }\n\n    return null\n  },\n\n  // Create a new folder in a Solid system, with a dokieli editable document in it\n  mintNew: function (context, newPaneOptions) {\n    const kb = context.session.store\n    let newInstance = newPaneOptions.newInstance\n    if (!newInstance) {\n      let uri = newPaneOptions.newBase\n      if (uri.endsWith('/')) {\n        uri = uri.slice(0, -1)\n        newPaneOptions.newBase = uri\n      }\n      newInstance = kb.sym(uri)\n    }\n\n    const contentType = mime.lookup(newInstance.uri)\n    if (!contentType || !contentType.includes('html')) {\n      newInstance = $rdf.sym(newInstance.uri + '.html')\n    }\n    newPaneOptions.newInstance = newInstance // Save for creation system\n\n    console.log('New dokieli will make: ' + newInstance)\n\n    let htmlContents = DOKIELI_TEMPLATE\n    let filename = newInstance.uri.split('/').slice(-1)[0]\n    filename = decodeURIComponent(filename.split('.')[0])\n    const encodedTitle = filename\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n    htmlContents = htmlContents.replace('<title>', '<title>' + encodedTitle)\n    htmlContents = htmlContents.replace(\n      '</article>',\n      '<h1>' + encodedTitle + '</h1></article>'\n    )\n    console.log('@@ New HTML for Dok:' + htmlContents)\n    return new Promise(function (resolve) {\n      kb.fetcher\n        .webOperation('PUT', newInstance.uri, {\n          data: htmlContents,\n          contentType: 'text/html'\n        })\n        .then(function () {\n          console.log(\n            'new Dokieli document created at ' + newPaneOptions.newInstance\n          )\n          resolve(newPaneOptions)\n        })\n        .catch(function (err) {\n          console.log(\n            'Error creating dokelili dok at ' +\n              newPaneOptions.newInstance +\n              ': ' +\n              err\n          )\n        })\n    })\n  },\n\n  // Derived from: humanReadablePane .. share code?\n  render: function (subject, context) {\n    const myDocument = context.dom\n    const div = myDocument.createElement('div')\n    const kb = context.session.store\n\n    //  @@ When we can, use CSP to turn off scripts within the iframe\n    div.setAttribute('class', 'docView')\n    const iframe = myDocument.createElement('IFRAME')\n    iframe.setAttribute('src', subject.uri) // allow-same-origin\n    iframe.setAttribute('class', 'doc')\n\n    const cts = kb.fetcher.getHeader(subject.doc(), 'content-type')\n    const ct = cts ? cts[0] : null\n    if (ct) {\n      console.log('dokieliPane: c-t:' + ct)\n    } else {\n      console.log('dokieliPane: unknown content-type?')\n    }\n\n    // @@ NOte beflow - if we set ANY sandbox, then Chrome and Safari won't display it if it is PDF.\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\n    // You can;'t have any sandbox and allow plugins.\n    // We could sandbox only HTML files I suppose.\n    // HTML5 bug: https://lists.w3.org/Archives/Public/public-html/2011Jun/0330.html\n\n    // iframe.setAttribute('sandbox', 'allow-same-origin allow-forms'); // allow-scripts ?? no documents should be static\n\n    iframe.setAttribute('style', 'resize = both; height: 40em; width:40em;') // @@ improve guess\n    //        iframe.setAttribute('height', '480')\n    //        iframe.setAttribute('width', '640')\n    const tr = myDocument.createElement('tr')\n    tr.appendChild(iframe)\n    div.appendChild(tr)\n    return div\n  }\n}\n// ends\n"],"file":"dokieliPane.js"}