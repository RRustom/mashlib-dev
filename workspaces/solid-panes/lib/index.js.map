{"version":3,"sources":["../src/index.ts"],"names":["getOutliner","dom","outlineManager","context","list","paneForIcon","paneForPredicate","register","byName","UI","store","solidLogicSingleton","OutlineManager","window","document","cjsOrEsModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;AACA;;;;AACA;;AACA;;AACA;;AAQA;;;;;;;;AA1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAeO,SAASA,WAAT,CAAsBC,GAAtB,EAA2B;AAChC,MAAI,CAACA,GAAG,CAACC,cAAT,EAAyB;AACvB,QAAMC,OAAO,GAAG,4BACdF,GADc,EAEd;AAAEG,MAAAA,IAAI,EAAJA,kBAAF;AAAQC,MAAAA,WAAW,EAAXA,yBAAR;AAAqBC,MAAAA,gBAAgB,EAAhBA,8BAArB;AAAuCC,MAAAA,QAAQ,EAARA,sBAAvC;AAAiDC,MAAAA,MAAM,EAANA;AAAjD,KAFc,EAGRC,EAAE,CAACC,KAHK,EAIRD,EAAE,CAACE,mBAJK,CAAhB;AAMAV,IAAAA,GAAG,CAACC,cAAJ,GAAqB,IAAIU,mBAAJ,CAAmBT,OAAnB,CAArB;AACD;;AACD,SAAOF,GAAG,CAACC,cAAX;AACD;;AACD,IAAI,OAAOW,MAAP,KAAkB,WAAtB,EAAmC;AACjCb,EAAAA,WAAW,CAACa,MAAM,CAACC,QAAR,CAAX;AACD;;AAED,+BAAc,UAACC,aAAD;AAAA,SAAwB,4BAASA,aAAa,WAAb,IAAyBA,aAAlC,CAAxB;AAAA,CAAd","sourcesContent":["/*                            SOLID PANES\n **\n **     Panes are regions of the outline view in which a particular subject is\n ** displayed in a particular way.\n ** Different panes about the same subject are typically stacked vertically.\n ** Panes may be used naked or with a pane selection header.\n **\n ** The label() method has two functions: it determines whether the pane is\n ** relevant to a given subject, returning null if not.\n ** If it is relevant, then it returns a suitable tooltip for a control which selects the pane\n */\n\n// create the unique UI module on which to attach panes (no, don't attach as UI dot panes any more)\n// var UI = require('solid-ui') // Note we will add the panes register to this.\nimport versionInfo from './versionInfo'\nimport * as UI from 'solid-ui'\nimport OutlineManager from './outline/manager.js'\nimport registerPanes from './registerPanes.js'\nimport {\n  list,\n  paneForIcon,\n  paneForPredicate,\n  register,\n  byName,\n  LiveStore\n} from 'pane-registry'\nimport { createContext } from './outline/context'\n\nexport function getOutliner (dom) {\n  if (!dom.outlineManager) {\n    const context = createContext(\n      dom,\n      { list, paneForIcon, paneForPredicate, register, byName },\n            UI.store as LiveStore,\n            UI.solidLogicSingleton\n    )\n    dom.outlineManager = new OutlineManager(context)\n  }\n  return dom.outlineManager\n}\nif (typeof window !== 'undefined') {\n  getOutliner(window.document)\n}\n\nregisterPanes((cjsOrEsModule: any) => register(cjsOrEsModule.default || cjsOrEsModule))\n\nexport {\n  list,\n  paneForIcon,\n  paneForPredicate,\n  register,\n  byName\n} from 'pane-registry'\n\n// We attach the solid-UI lower-level system for convenience\n// Currently most panes are built using it anyway.\n// It also gives access to rdflib as panes.UI.rdf\n\n// This has common outline mode functionality for the default and other other panes\n// A separate outline manager is required per DOM in cases like a browser extension\n// where there are many occurrences of window and of window.document\n// But each DOM should have just one outline manager.\n\nexport { OutlineManager, UI, versionInfo }\n"],"file":"index.js"}