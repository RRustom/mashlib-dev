{"version":3,"sources":["../src/participation.ts"],"names":["ParticipationTableElement","HTMLTableElement","kb","solidLogicSingleton","store","renderPartipants","dom","table","unused1","subject","unused2","options","setAttribute","newRowForParticpation","parp","person","any","ns","wf","tr","createElement","textContent","bg","anyValue","ui","block","appendChild","td","insertBefore","firstChild","syncTable","parps","each","map","cal","sort","participations","p","refresh","participationObject","padDoc","me","Promise","resolve","reject","Error","filter","pn","holds","length","participation","ins","Date","updater","update","uri","ok","errorMessage","recordParticipation","refreshable","manageParticipation","container","e"],"mappings":"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","sourcesContent":["import { currentUser } from './authn/authn'\nimport { NamedNode, st } from 'rdflib'\nimport ns from './ns'\nimport { personTR, newThing, errorMessageBlock } from './widgets'\nimport { syncTableToArray } from './utils'\nimport { lightColorHash } from './pad'\nimport { log } from './debug'\nimport { solidLogicSingleton } from './logic'\n\ntype ParticipationOptions = {\n  deleteFunction?: () => {}\n  link?: string\n  draggable?: boolean\n}\n\nclass ParticipationTableElement extends HTMLTableElement {\n  refresh?: () => void\n}\nconst kb = solidLogicSingleton.store\n\n/**  Manage participation in this session\n*\n*  @param {Document} dom - the web page loaded into the browser\n*  @param {HTMLTableElement} table - the table element\n*  @param {NamedNode} unused1/document - the document to render (this argument is no longer used, but left in for backwards compatibility)\n*  @param {NamedNode} subject - the thing in which the participation is happening\n*  @param {NamedNode} unused2/me - user that is logged into the pod (this argument is no longer used, but left in for backwards compatibility)\n*  @param {ParticipationOptions} options - the options that can be passed in are deleteFunction, link, and draggable these are used by the personTR button\n*/\nexport function renderPartipants (dom: HTMLDocument, table: ParticipationTableElement, unused1: NamedNode, subject: NamedNode, unused2: NamedNode, options: ParticipationOptions) {\n  table.setAttribute('style', 'margin: 0.8em;')\n\n  const newRowForParticpation = function (parp) {\n    const person = kb.any(parp, ns.wf('participant'))\n\n    let tr\n    if (!person) {\n      tr = dom.createElement('tr')\n      tr.textContent = '???' // Don't crash - invalid part'n entry\n      return tr\n    }\n    const bg = kb.anyValue(parp, ns.ui('backgroundColor')) || 'white'\n\n    const block = dom.createElement('div')\n    block.setAttribute(\n      'style',\n      'height: 1.5em; width: 1.5em; margin: 0.3em; border 0.01em solid #888; background-color: ' +\n      bg\n    )\n    tr = personTR(dom, null, person, options)\n    table.appendChild(tr)\n    const td = dom.createElement('td')\n    td.setAttribute('style', 'vertical-align: middle;')\n    td.appendChild(block)\n    tr.insertBefore(td, tr.firstChild)\n    return tr\n  }\n\n  const syncTable = function () {\n    const parps = kb.each(subject, ns.wf('participation')).map(function (parp) {\n      log('in participants')\n      return [kb.anyValue(parp as any, ns.cal('dtstart')) || '9999-12-31', parp]\n    })\n    parps.sort() // List in order of joining\n    const participations = parps.map(function (p) {\n      return p[1]\n    })\n    syncTableToArray(table, participations, newRowForParticpation)\n  }\n  table.refresh = syncTable\n  syncTable()\n  return table\n}\n\n/** Record, or find old, Particpation object\n *\n * A particpaption object is a place to record things specifically about\n * subject and the user, such as preferences, start of membership, etc\n * @param {NamedNode} subject - the thing in which the participation is happening\n * @param {NamedNode} document -  where to record the data\n * @param {NamedNode} me - the logged in user\n *\n */\nexport function participationObject (subject: NamedNode, padDoc: NamedNode, me: NamedNode) {\n  return new Promise(function (resolve, reject) {\n    if (!me) {\n      throw new Error('Not user id')\n    }\n\n    const parps = kb.each(subject, ns.wf('participation')).filter(function (pn) {\n      return kb.holds(pn, ns.wf('participant'), me)\n    })\n    if (parps.length > 1) {\n      throw new Error('Multiple records of your participation')\n    }\n    if (parps.length) {\n      // If I am not already recorded\n      resolve(parps[0]) // returns the particpation object\n    } else {\n      const participation = newThing(padDoc)\n      const ins = [\n        st(subject, ns.wf('participation'), participation, padDoc),\n\n        st(participation, ns.wf('participant'), me, padDoc),\n        st(participation, ns.cal('dtstart'), new Date() as any, padDoc),\n        st(\n          participation,\n          ns.ui('backgroundColor'),\n          lightColorHash(me) as any,\n          padDoc\n        )\n      ]\n      if (!kb.updater) {\n        throw new Error('kb has no updater')\n      }\n      kb.updater.update([], ins, function (uri: string | null | undefined, ok: boolean, errorMessage?: string) {\n        if (!ok) {\n          reject(new Error('Error recording your partipation: ' + errorMessage))\n        } else {\n          resolve(participation)\n        }\n      })\n      resolve(participation)\n    }\n  })\n}\n\n/** Record my participation and display participants\n *\n * @param {NamedNode} subject - the thing in which participation is happening\n * @param {NamedNode} padDoc - the document into which the particpation should be recorded\n * @param {DOMNode} refreshable - a DOM element whose refresh() is to be called if the change works\n *\n */\nexport function recordParticipation (subject: NamedNode, padDoc: NamedNode, refreshable: any) {\n  const me = currentUser()\n  if (!me) return // Not logged in\n\n  const parps = kb.each(subject, ns.wf('participation')).filter(function (pn) {\n    return kb.holds(pn, ns.wf('participant'), me)\n  })\n  if (parps.length > 1) {\n    throw new Error('Multiple records of your participation')\n  }\n  if (parps.length) {\n    // If I am not already recorded\n    return parps[0] // returns the particpation object\n  } else {\n    const participation = newThing(padDoc)\n    const ins = [\n      st(subject, ns.wf('participation'), participation, padDoc),\n\n      st(participation, ns.wf('participant'), me, padDoc),\n      st(participation, ns.cal('dtstart'), new Date() as any, padDoc),\n      st(\n        participation,\n        ns.ui('backgroundColor'),\n        lightColorHash(me) as any,\n        padDoc\n      )\n    ]\n    if (!kb.updater) {\n      throw new Error('kb has no updater')\n    }\n    kb.updater.update([], ins, function (uri: string | null | undefined, ok: boolean, errorMessage?: string) {\n      if (!ok) {\n        throw new Error('Error recording your partipation: ' + errorMessage)\n      }\n      if (refreshable && refreshable.refresh) {\n        refreshable.refresh()\n      }\n      // UI.pad.renderPartipants(dom, table, padDoc, subject, me, options)\n    })\n    return participation\n  }\n}\n\n/**  Record my participation and display participants\n*\n*   @param {Document} dom  - the web page loaded into the browser\n*   @param {HTMLDivElement} container - the container element where the participants should be displayed\n*   @param {NamedNode} document - the document into which the particpation should be shown\n*   @param {NamedNode} subject - the thing in which participation is happening\n*   @param {NamedNode} me - the logged in user\n*   @param {ParticipationOptions} options - the options that can be passed in are deleteFunction, link, and draggable these are used by the personTR button\n*\n*/\nexport function manageParticipation (\n  dom: Document,\n  container: HTMLDivElement,\n  padDoc: NamedNode,\n  subject: NamedNode,\n  me: NamedNode,\n  options: ParticipationOptions\n) {\n  const table = dom.createElement('table')\n  container.appendChild(table)\n  renderPartipants(dom, table, padDoc, subject, me, options)\n  try {\n    recordParticipation(subject, padDoc, table)\n  } catch (e) {\n    container.appendChild(\n      errorMessageBlock(\n        dom,\n        'Error recording your partipation: ' + e\n      )\n    ) // Clean up?\n  }\n  return table\n}\n"],"file":"participation.js"}