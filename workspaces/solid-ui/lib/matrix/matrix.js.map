{"version":3,"sources":["../../src/matrix/matrix.ts"],"names":["kb","solidLogicSingleton","store","matrixForQuery","dom","query","vx","vy","vvalue","options","whenDone","matrix","createElement","header","corner","appendChild","setAttribute","lastHeader","columns","rows","setCell","cell","x","y","value","firstChild","removeChild","style","textAlign","cellFunction","textContent","utils","label","old","rowFor","y1","toNT","tr","termType","fetcher","nowOrWhenFetched","uri","split","undefined","ok","_body","_response","i","length","$rdf","fromNT","dataValueNT","ele","nextSibling","yDecreasing","insertBefore","columnNumberFor","x1","xNT","col","xDecreasing","slice","concat","push","row","td","t","j","markOldCells","children","clearOldCells","colsUsed","rowsUsed","set_y","k","set_x","newcolumns","refresh","addCellFromBindings","bindings","toString","colNo"],"mappings":"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","sourcesContent":["//      Build a 2D matrix of values\n//\n//  dom      AKA document\n//  query    a Query object of rdflib.js with a valid pattern\n//  vx       A variable object, the one to be used for the X variable (horiz)\n//  vy       A variable object, the one to be used for the Y variable (vertical)\n//  vvalue       A variable object, the one to be used for the cell value\n//  returns  A DOM element with the matrix in it, which has a .refresh() function.\n//\n// Options:\n//     cellFunction(td, x, y, value)  fill the TD element of a single cell\n//     xDecreasing  set true for x axis to be in decreasing order.\n//     yDecreasing  set true for y axis to be in decreasing order.\n//     set_x        array of X values to be define initial rows (order irrelevant)\n//     set_y        array of Y values to be define initial columns\n//\n// Features:\n//   Header row at top (x axis) and left (y-axis) generated automatically.\n//   Extra rows and columns are inserted as needed to hold new data points\n//   matrix.refresh() will re-run the query and adjust the display\n\nimport utils from '../utils'\nimport * as $rdf from 'rdflib'\nimport { MatrixOptions } from './types'\nimport { solidLogicSingleton } from '../logic'\n\nconst kb = solidLogicSingleton.store\n\nexport function matrixForQuery (\n  dom: HTMLDocument,\n  query: $rdf.Query,\n  vx: $rdf.Variable,\n  vy: $rdf.Variable,\n  vvalue: $rdf.Variable,\n  options: MatrixOptions,\n  whenDone: () => void\n) {\n  // @@ TODO Remove need to cast to any\n  const matrix: any = dom.createElement('table')\n  const header = dom.createElement('tr')\n  const corner = header.appendChild(dom.createElement('td'))\n  corner.setAttribute('class', 'MatrixCorner')\n  matrix.appendChild(header) // just one for now\n  matrix.lastHeader = header // Element before data\n  let columns: any[] = [] // Vector\n  const rows: any[] = [] // Associative array\n\n  const setCell = function (cell, x, y, value) {\n    while (cell.firstChild) {\n      // Empty any previous\n      cell.removeChild(cell.firstChild)\n    }\n    cell.setAttribute('style', '')\n    cell.style.textAlign = 'center'\n\n    if (options.cellFunction) {\n      options.cellFunction(cell, x, y, value)\n    } else {\n      cell.textContent = utils.label(value)\n      cell.setAttribute('style', 'padding: 0.3em')\n    }\n    delete cell.old\n  }\n\n  const rowFor = function (y1) {\n    const y = y1.toNT()\n    if (rows[y]) return rows[y]\n    // @@ TODO Remove need for casting to any\n    const tr: any = dom.createElement('tr')\n    const header = tr.appendChild(dom.createElement('td'))\n    header.setAttribute('style', 'padding: 0.3em;')\n    header.textContent = utils.label(y1) // first approximation\n    if (y1.termType === 'NamedNode') {\n      kb.fetcher!.nowOrWhenFetched(y1.uri.split('#')[0], undefined, function (\n        ok,\n        _body,\n        _response\n      ) {\n        if (ok) header.textContent = utils.label(y1)\n      })\n    }\n    for (let i = 0; i < columns.length; i++) {\n      setCell(\n        tr.appendChild(dom.createElement('td')),\n        $rdf.fromNT(columns[i]),\n        y1,\n        null\n      )\n    }\n    tr.dataValueNT = y\n    rows[y] = tr\n    for (let ele = matrix.lastHeader.nextSibling; ele; ele = ele.nextSibling) {\n      // skip header\n      if (\n        (y > ele.dataValueNT && options && options.yDecreasing) ||\n        (y < ele.dataValueNT && !(options && options.yDecreasing))\n      ) {\n        return matrix.insertBefore(tr, ele) // return the tr\n      }\n    }\n    return matrix.appendChild(tr) // return the tr\n  }\n\n  const columnNumberFor = function (x1): number {\n    const xNT: any = x1.toNT() // xNT is a NT string\n    let col: any = null\n    // These are data columns (not headings)\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i] === xNT) {\n        return i\n      }\n\n      if (\n        (xNT > columns[i] && options.xDecreasing) ||\n        (xNT < columns[i] && !options.xDecreasing)\n      ) {\n        columns = columns\n          .slice(0, i)\n          .concat([xNT])\n          .concat(columns.slice(i))\n        col = i\n        break\n      }\n    }\n\n    if (col === null) {\n      col = columns.length\n      columns.push(xNT)\n    }\n\n    // col is the number of the new column, starting from 0\n    for (let row = matrix.firstChild; row; row = row.nextSibling) {\n      // For every row header or not\n      const y = row.dataValueNT\n      const td = dom.createElement('td') // Add a new cell\n      td.style.textAlign = 'center'\n      if (row === matrix.firstChild) {\n        td.textContent = utils.label(x1)\n      } else {\n        setCell(td, x1, $rdf.fromNT(y), null)\n      }\n      if (col === columns.length - 1) {\n        row.appendChild(td)\n      } else {\n        let t = row.firstChild\n        for (let j = 0; j < col + 1; j++) {\n          // Skip header col too\n          t = t.nextSibling\n        }\n        row.insertBefore(td, t)\n      }\n    }\n    return col\n  }\n\n  const markOldCells = function () {\n    for (let i = 1; i < matrix.children.length; i++) {\n      const row = matrix.children[i]\n      for (let j = 1; j < row.children.length; j++) {\n        row.children[j].old = true\n      }\n    }\n  }\n\n  const clearOldCells = function () {\n    let row, cell\n    const colsUsed: any[] = []\n    const rowsUsed: any[] = []\n\n    if (options.set_y) {\n      // Knows y values create rows\n      for (let k = 0; k < options.set_y.length; k++) {\n        rowsUsed[options.set_y[k]] = true\n      }\n    }\n    if (options.set_x) {\n      for (let k = 0; k < options.set_x.length; k++) {\n        colsUsed[columnNumberFor(options.set_x[k]) + 1] = true\n      }\n    }\n\n    for (let i = 1; i < matrix.children.length; i++) {\n      row = matrix.children[i]\n      for (let j = 1; j < row.children.length; j++) {\n        cell = row.children[j]\n        if (cell.old) {\n          const y = $rdf.fromNT(row.dataValueNT)\n          const x = $rdf.fromNT(columns[j - 1])\n          setCell(cell, x, y, null)\n        } else {\n          rowsUsed[row.dataValueNT] = true\n          colsUsed[j] = true\n        }\n      }\n    }\n\n    for (let i = 0; i < matrix.children.length; i++) {\n      row = matrix.children[i]\n      if (i > 0 && !rowsUsed[row.dataValueNT]) {\n        delete rows[row.dataValueNT]\n        matrix.removeChild(row)\n      } else {\n        for (let j = row.children.length - 1; j > 0; j--) {\n          // backwards\n          const cell = row.children[j]\n          if (!colsUsed[j]) {\n            row.removeChild(cell)\n          }\n        }\n      }\n    }\n    const newcolumns: any[] = []\n    for (let j = 0; j < columns.length; j++) {\n      if (colsUsed[j + 1]) {\n        newcolumns.push(columns[j])\n      }\n    }\n    columns = newcolumns\n  }\n\n  matrix.refresh = function () {\n    markOldCells()\n    kb.query(query, addCellFromBindings, undefined, clearOldCells)\n  }\n\n  const addCellFromBindings = function (bindings) {\n    const x = bindings[vx.toString()]\n    const y = bindings[vy.toString()]\n    const value = bindings[(vvalue.toString())]\n    const row = rowFor(y)\n    const colNo = columnNumberFor(x)\n    const cell = row.children[colNo + 1] // number of Y axis headings\n    setCell(cell, x, y, value)\n  }\n\n  if (options.set_y) {\n    // Knows y values create rows\n    for (let k = 0; k < options.set_y.length; k++) {\n      rowFor(options.set_y[k])\n    }\n  }\n  if (options.set_x) {\n    for (let k = 0; k < options.set_x.length; k++) {\n      columnNumberFor(options.set_x[k])\n    }\n  }\n\n  kb.query(query, addCellFromBindings, undefined, whenDone) // Populate the matrix\n  return matrix\n}\n"],"file":"matrix.js"}